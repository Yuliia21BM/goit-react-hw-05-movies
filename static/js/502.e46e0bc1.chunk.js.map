{"version":3,"file":"static/js/502.e46e0bc1.chunk.js","mappings":"mPAEaA,EAAWC,EAAAA,GAAAA,GAAH,6HAQRC,EAAWD,EAAAA,GAAAA,GAAH,8VAeRE,EAAWF,EAAAA,GAAAA,GAAH,4C,SCerB,EAnCkB,WAChB,IAAQG,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,MACAC,EAAAA,EAAAA,YAAU,WACHL,IACLM,EAAAA,EAAAA,IAAiBN,GAAIO,MAAK,gBAAGJ,EAAH,EAAGA,KAAH,OAAcC,EAAQD,EAAtB,GAC3B,GAAE,CAACH,IAEJ,OACE,SAACJ,EAAD,UACGO,IAAS,GACRA,EAAKK,KAAI,SAAAC,GACP,OACE,UAACX,EAAD,YACE,gBACEY,MAAM,OACNC,IACEF,EAAKG,aAVF,kCAU8BH,EAAKG,aAAe,GAGvDC,IAAKJ,EAAKK,KAAOL,EAAKK,KAAO,UAC7BC,QAAQ,UAEV,SAAChB,EAAD,UAAWU,EAAKK,KAAOL,EAAKK,KAAO,aACnC,uBAAIL,EAAKO,UAAYP,EAAKO,UAAY,cAXxC,UAAkBP,EAAKT,GAAvB,oBAAqCiB,KAAKC,OAAO,IAcpD,KAED,wEAIP,C,+LCpCKC,EAAU,mCACVC,EAAW,+BAEV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,yGAA8BC,EAA9B,+BAAqC,EAArC,kBAEoBC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBD,EADrB,iBACqCG,IAHzD,cAEGE,EAFH,yBAMIA,EAASC,MANb,gCAQHC,QAAQC,MAAM,2CARX,iFAYA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,4FAAuCP,EAAvC,+BAA8C,EAA9C,kBAEoBC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeD,EADf,kBACgCU,EADhC,iBAC6CP,IAHjE,cAEGE,EAFH,yBAKIA,EAASC,MALb,gCAOHC,QAAQC,MAAM,2CAPX,iFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+B9B,GAA/B,gGAEoBuB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACApB,EADA,oBACcmB,IAHlC,UAMqB,OAJlBK,EAFH,QAMUO,OANV,0EAUIP,EAASC,MAVb,gCAYHC,QAAQC,MAAM,2CAZX,gFAgBA,SAAerB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCN,GAAhC,gGAEoBuB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACApB,EADA,4BACsBmB,IAH1C,UAMqB,OAJlBK,EAFH,QAMUO,OANV,0EAUIP,EAASC,MAVb,gCAYHC,QAAQC,MAAM,2CAZX,gFAgBA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAkChC,GAAlC,gGAEoBuB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACApB,EADA,4BACsBmB,IAH1C,UAMqB,OAJlBK,EAFH,QAMUO,OANV,0EAUIP,EAASC,MAVb,gCAYHC,QAAQC,MAAM,2CAZX,gF","sources":["components/MovieCast/MovieCast.styled.jsx","components/MovieCast/MovieCast.jsx","fetchApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: center;\n`;\n\nexport const CastItem = styled.li`\n  flex-basis: calc((100% - 40px) / 2);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 60px) / 3);\n  }\n\n  @media screen and (min-width: 1280px) {\n    flex-basis: calc((100% - 120px) / 5);\n  }\n`;\n\nexport const CastName = styled.h1`\n  font-size: 24px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { searchMovieCasts } from '../../fetchApi';\nimport { CastList, CastItem, CastName } from './MovieCast.styled';\n\nconst MovieCast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState([]);\n  useEffect(() => {\n    if (!id) return;\n    searchMovieCasts(id).then(({ cast }) => setCast(cast));\n  }, [id]);\n  const POSTER_URL = 'https://image.tmdb.org/t/p/w500';\n  return (\n    <CastList>\n      {cast !== [] ? (\n        cast.map(item => {\n          return (\n            <CastItem key={`${item.id}12345ab67${Math.random(4)}`}>\n              <img\n                width=\"100%\"\n                src={\n                  item.profile_path ? POSTER_URL + item.profile_path : ''\n                  //   defaultPoster.src\n                }\n                alt={item.name ? item.name : 'Unknown'}\n                loading=\"lazy\"\n              ></img>\n              <CastName>{item.name ? item.name : 'Unknown'}</CastName>\n              <p>{item.character ? item.character : 'uncnown'}</p>\n            </CastItem>\n          );\n        })\n      ) : (\n        <p>Sorry, we don`t have cast for thit movie :(</p>\n      )}\n    </CastList>\n  );\n};\n\nexport default MovieCast;\n","import axios from 'axios';\n\nconst API_KEY = '8b3f9f93b217543bb23268b1f13b0854';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport async function getPopularFilm(page = 1) {\n  try {\n    const fetchAPI = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`\n    );\n\n    return fetchAPI.data;\n  } catch (error) {\n    console.error('Something is wrong with the search' + error);\n  }\n}\n\nexport async function searchMovieByName(text, page = 1) {\n  try {\n    const fetchAPI = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${text}&page=${page}`\n    );\n    return fetchAPI.data;\n  } catch (error) {\n    console.error('Something is wrong with the search' + error);\n  }\n}\n\nexport async function searchMovieById(id) {\n  try {\n    const fetchAPI = await axios.get(\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}`\n    );\n\n    if (fetchAPI.status !== 200) {\n      return;\n    }\n\n    return fetchAPI.data;\n  } catch (error) {\n    console.error('Something is wrong with the search' + error);\n  }\n}\n\nexport async function searchMovieCasts(id) {\n  try {\n    const fetchAPI = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\n    );\n\n    if (fetchAPI.status !== 200) {\n      return;\n    }\n\n    return fetchAPI.data;\n  } catch (error) {\n    console.error('Something is wrong with the search' + error);\n  }\n}\n\nexport async function searchMovieReviews(id) {\n  try {\n    const fetchAPI = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n    );\n\n    if (fetchAPI.status !== 200) {\n      return;\n    }\n\n    return fetchAPI.data;\n  } catch (error) {\n    console.error('Something is wrong with the search' + error);\n  }\n}\n"],"names":["CastList","styled","CastItem","CastName","id","useParams","useState","cast","setCast","useEffect","searchMovieCasts","then","map","item","width","src","profile_path","alt","name","loading","character","Math","random","API_KEY","BASE_URL","getPopularFilm","page","axios","fetchAPI","data","console","error","searchMovieByName","text","searchMovieById","status","searchMovieReviews"],"sourceRoot":""}